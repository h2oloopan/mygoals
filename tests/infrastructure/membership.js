// Generated by CoffeeScript 1.6.2
var config, membership, mockRepo, should;

should = require('should');

membership = require('../../infrastructure/membership');

config = require('../../config');

mockRepo = {};

membership.initialize(mockRepo);

describe('membership', function() {
  describe('middleware', function() {
    return it('should work as expected', function(done) {
      var req;

      mockRepo.getUser = function(query, cb) {
        return cb(null, {
          id: query.id
        });
      };
      req = {
        signedCookies: {
          'P': 99,
          'U': 12
        }
      };
      return membership.middleware(req, {}, function() {
        req.privilege.should.equal(99);
        req.user.should.be.a('object');
        req.user.should.have.property('id', req.signedCookies.U);
        return done();
      });
    });
  });
  describe('signup', function() {
    it('should return error if repo fails', function(done) {
      mockRepo.createUser = function(user, cb) {
        var err;

        err = new Error('Crack!');
        return cb(err);
      };
      return membership.signup({
        password: 'abc'
      }, function(err, user) {
        should.exist(err);
        should.not.exist(user);
        return done();
      });
    });
    it('should return error if user has no password', function(done) {
      return membership.signup({}, function(err, user) {
        should.exist(err);
        should.not.exist(user);
        return done();
      });
    });
    it('should return error if password is too short', function(done) {
      var min, password;

      min = config.system.password.min;
      password = '';
      while (min -= 1) {
        password += 'x';
      }
      return membership.signup({
        password: password
      }, function(err, user) {
        should.exist(err);
        should.not.exist(user);
        return done();
      });
    });
    it('should return error if password is too long', function(done) {
      var max, password;

      max = config.system.password.max;
      password = '';
      while (max -= 1) {
        password += 'x';
      }
      password += 'xx';
      return membership.signup({
        password: password
      }, function(err, user) {
        should.exist(err);
        should.not.exist(user);
        return done();
      });
    });
    return it('should return user if repo succeeds', function(done) {
      mockRepo.createUser = function(user, cb) {
        return cb(null, {
          id: 999
        });
      };
      return membership.signup({
        password: 'abcdef'
      }, function(err, user) {
        should.not.exist(err);
        should.exist(user);
        user.should.have.property('id', 999);
        return done();
      });
    });
  });
  return describe('authenticate', function() {
    it('should return error if error occured', function(done) {
      mockRepo.getUserWithGroup = function(query, cb) {
        var err;

        err = new Error('Error');
        return cb(err);
      };
      return membership.authenticate('', '', function(err, user) {
        should.exist(err);
        return done();
      });
    });
    it('should return null if no such user', function(done) {
      mockRepo.getUserWithGroup = function(query, cb) {
        return cb(null, null);
      };
      return membership.authenticate('', '', function(err, user) {
        should.not.exist(err);
        should.equal(user, null);
        return done();
      });
    });
    return it('should return user if exists', function(done) {
      mockRepo.getUserWithGroup = function(query, cb) {
        var user;

        user = {
          email: 'a@b.com',
          password: 'some password'
        };
        return cb(null, user);
      };
      return membership.authenticate('', '', function(err, user) {
        should.not.exist(err);
        user.should.be.a('object');
        user.email.should.equal('a@b.com');
        user.password.should.equal('some password');
        return done();
      });
    });
  });
});
