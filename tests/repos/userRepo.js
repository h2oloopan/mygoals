// Generated by CoffeeScript 1.6.2
var mysql, should, userRepo;

should = require('should');

mysql = require('../../infrastructure/db').mysql;

userRepo = require('../../repos/userRepo');

describe('userRepo', function() {
  beforeEach(function(done) {
    var query;

    query = 'DELETE FROM users;';
    return mysql.query(query).success(function() {
      query = 'INSERT INTO users (username, email, password) VALUES ("testuser", "test@test.com", "correct password");';
      return mysql.query(query).success(function() {
        return done();
      }).error(function(err) {
        return done(err);
      });
    }).error(function(err) {
      return done(err);
    });
  });
  describe('getUser', function() {
    it('should return with error when causing trouble in the database (e.g. bad column name)', function(done) {
      return userRepo.getUser({
        xx: 'yy'
      }, function(err, user) {
        should.exist(err);
        should.not.exist(user);
        return done();
      });
    });
    it('should return null when no rows in the db match query', function(done) {
      return userRepo.getUser({
        email: 'test@test.com',
        password: 'wrong password'
      }, function(err, user) {
        should.not.exist(err);
        should.not.exist(user);
        return done();
      });
    });
    return it('should return user when the query matches', function(done) {
      return userRepo.getUser({
        email: 'test@test.com',
        password: 'correct password'
      }, function(err, user) {
        should.not.exist(err);
        user.should.have.property('username', 'testuser');
        user.should.have.property('email', 'test@test.com');
        user.should.have.property('password', 'correct password');
        return done();
      });
    });
  });
  describe('createUser', function() {
    it('should return with error if passed in user has invalid columns', function(done) {
      return userRepo.createUser({
        username: 'baduser',
        email: 'a@b.com',
        xx: 'yy'
      }, function(err, user) {
        should.exist(err);
        should.not.exist(user);
        return done();
      });
    });
    it('should return with error if email is in wrong format', function(done) {
      return userRepo.createUser({
        username: 'baduser',
        email: 'xxx',
        password: 'test password'
      }, function(err, user) {
        should.exist(err);
        should.not.exist(user);
        return done();
      });
    });
    it('should return with error if username is in wrong format', function(done) {
      return userRepo.createUser({
        username: 'wrong format',
        email: 'right@email.com',
        password: 'test password'
      }, function(err, user) {
        should.exist(err);
        should.not.exist(user);
        return done();
      });
    });
    it('should return with error if username is null', function(done) {
      return userRepo.createUser({
        email: 'bad@user.com',
        password: 'test password'
      }, function(err, user) {
        should.exist(err);
        should.not.exist(user);
        return done();
      });
    });
    it('should return with error if email is null', function(done) {
      return userRepo.createUser({
        username: 'baduser',
        password: 'test password'
      }, function(err, user) {
        should.exist(err);
        should.not.exist(user);
        return done();
      });
    });
    it('should return with error if password is null', function(done) {
      return userRepo.createUser({
        username: 'baduser',
        email: 'a@b.com'
      }, function(err, user) {
        should.exist(err);
        should.not.exist(user);
        return done();
      });
    });
    it('should return with error if username is duplicate', function(done) {
      return userRepo.createUser({
        username: 'testuser',
        email: 'another@test.com',
        password: 'test password'
      }, function(err, user) {
        should.exist(err);
        should.not.exist(user);
        return done();
      });
    });
    it('should return with error if email is duplicate', function(done) {
      return userRepo.createUser({
        username: 'baduser',
        email: 'test@test.com',
        password: 'test password'
      }, function(err, user) {
        should.exist(err);
        should.not.exist(user);
        return done();
      });
    });
    return it('should return without error and with user if none of above happen', function(done) {
      return userRepo.createUser({
        username: 'gooduser',
        email: 'good@email.com',
        password: 'good password'
      }, function(err, user) {
        should.not.exist(err);
        should.exist(user);
        user.should.have.property('username', 'gooduser');
        user.should.have.property('email', 'good@email.com');
        user.should.have.property('password', 'good password');
        return done();
      });
    });
  });
  return describe('deleteUser', function() {
    return it('should delete user that it no longer exists in database', function(done) {
      return userRepo.deleteUser({
        email: 'test@test.com',
        password: 'correct password'
      }, function(err) {
        var query;

        should.not.exist(err);
        query = 'SELECT * FROM users WHERE email = "test@test.com" AND password = "correct password";';
        return mysql.query(query).success(function(rows) {
          rows.length.should.equal(0);
          return done();
        }).error(function(err) {
          return done(err);
        });
      });
    });
  });
});
