// Generated by CoffeeScript 1.6.2
var forumRepo, mysql, should;

should = require('should');

mysql = require('../../infrastructure/db').mysql;

forumRepo = require('../../repos/forumRepo');

describe('forumRepo', function() {
  beforeEach(function(done) {
    var query;

    query = 'DELETE FROM sections;';
    return mysql.query(query).success(function() {
      query = 'INSERT INTO sections (name) VALUES ("test section");';
      return mysql.query(query).success(function() {
        query = 'INSERT INTO sections (name) VALUES ("another test section");';
        return mysql.query(query).success(function() {
          return done();
        }).error(function(err) {
          return done(err);
        });
      }).error(function(err) {
        return done(err);
      });
    }).error(function(err) {
      return done(err);
    });
  });
  describe('getSection', function() {
    it('should return with error when causing trouble in the database (e.g. bad column name)', function(done) {
      return forumRepo.getSection({
        xx: 'yy'
      }, function(err, section) {
        should.exist(err);
        should.not.exist(section);
        return done();
      });
    });
    it('should return null when no rows in the db match query', function(done) {
      return forumRepo.getSection({
        name: 'bad name'
      }, function(err, section) {
        should.not.exist(err);
        should.not.exist(section);
        return done();
      });
    });
    return it('should return section when the query matches', function(done) {
      return forumRepo.getSection({
        name: 'test section'
      }, function(err, section) {
        should.not.exist(err);
        section.should.have.property('name', 'test section');
        return done();
      });
    });
  });
  describe('getSections', function() {
    it('should return with error when causing trouble in the database (e.g. bad column name)', function(done) {
      return forumRepo.getSections({
        xx: 'yy'
      }, function(err, sections) {
        should.exist(err);
        should.not.exist(sections);
        return done();
      });
    });
    it('should return empty array when no rows in the db match query', function(done) {
      return forumRepo.getSections({
        name: 'bad name'
      }, function(err, sections) {
        should.not.exist(err);
        sections.should.be.an.instanceOf(Array);
        sections.length.should.equal(0);
        return done();
      });
    });
    it('should return all objects in the database if no constraints passed in', function(done) {
      return forumRepo.getSections(null, function(err, sections) {
        should.not.exist(err);
        sections.should.be.an.instanceOf(Array);
        sections.length.should.equal(2);
        sections[0].should.have.property('name', 'test section');
        sections[1].should.have.property('name', 'another test section');
        return done();
      });
    });
    return it('should return all matching rows in the database', function(done) {
      return forumRepo.getSections({
        name: 'another test section'
      }, function(err, sections) {
        should.not.exist(err);
        sections.should.be.an.instanceOf(Array);
        sections.length.should.equal(1);
        sections[0].should.have.property('name', 'another test section');
        return done();
      });
    });
  });
  describe('deleteSectionById', function() {
    it('should return with err when causing trouble in the database (e.g. invalid id)', function(done) {
      return forumRepo.deleteSectionById('wtf', function(err) {
        should.exist(err);
        return done();
      });
    });
    it('should return with err when there is no row in the db matches passed in id', function(done) {
      return forumRepo.deleteSectionById(-1, function(err) {
        should.exist(err);
        return done();
      });
    });
    return it('should delete the matching section when passing in a correct id', function(done) {
      var query;

      query = 'SELECT id FROM sections WHERE name = "test section";';
      return mysql.query(query).success(function(rows) {
        var id;

        id = rows[0].id;
        return forumRepo.deleteSectionById(id, function(err) {
          should.not.exist(err);
          query = 'SELECT id FROM sections WHERE id = ' + id + ';';
          return mysql.query(query).success(function(rows) {
            rows.length.should.equal(0);
            return done();
          }).error(function(err) {
            return done(err);
          });
        });
      }).error(function(err) {
        return done(err);
      });
    });
  });
  return describe('updateSection', function() {
    it('should return with err if section passed in has no id', function(done) {
      return forumRepo.updateSection({
        name: 'section without id'
      }, function(err, section) {
        should.exist(err);
        should.not.exist(section);
        return done();
      });
    });
    return it('should update the item in database accordingly', function(done) {
      var query;

      query = 'SELECT id FROM sections WHERE name = "test section";';
      return mysql.query(query).success(function(rows) {
        var id;

        id = rows[0].id;
        return forumRepo.updateSection({
          id: id,
          name: 'new section name'
        }, function(err, section) {
          should.not.exist(err);
          should.exist(section);
          section.should.have.property('id', id);
          section.should.have.property('name', 'new section name');
          query = 'SELECT id, name FROM sections WHERE id = ' + id + ';';
          return mysql.query(query).success(function(rows) {
            rows.length.should.equal(1);
            rows[0].name.should.equal('new section name');
            return done();
          }).error(function(err) {
            return done(err);
          });
        });
      }).error(function(err) {
        return done(err);
      });
    });
  });
});
