// Generated by CoffeeScript 1.6.3
(function() {
  var Group, User, UserInfo, mysql, userRepo;

  User = require('../models/user');

  UserInfo = require('../models/userInfo');

  Group = require('../models/group');

  mysql = require('../infrastructure/db').mysql;

  userRepo = module.exports = {
    getUser: function(query, cb) {
      return User.find({
        where: query
      }).success(function(user) {
        return cb(null, user);
      }).error(function(err) {
        return cb(err);
      });
    },
    getUserWithGroup: function(query, cb) {
      return User.find({
        where: query,
        include: [Group]
      }).success(function(user) {
        return cb(null, user);
      }).error(function(err) {
        return cb(err);
      });
    },
    getUserWithInfo: function(query, cb) {
      return User.find({
        where: query,
        include: [UserInfo]
      }).success(function(user) {
        return cb(null, user);
      }).error(function(err) {
        return cb(err);
      });
    },
    getGroup: function(query, cb) {
      return Group.find({
        where: query
      }).success(function(group) {
        return cb(null, group);
      }).error(function(err) {
        return cb(err);
      });
    },
    createUser: function(user, cb) {
      var err, result;
      user = User.build(user);
      result = user.validate();
      if (result != null) {
        if (result.username != null) {
          err = new Error(result.username[0]);
        } else if (result.email != null) {
          err = new Error(result.email[0]);
        } else if (result.password != null) {
          err = new Error(result.password[0]);
        }
        return cb(err);
      }
      return user.save().success(function(user) {
        var info;
        info = UserInfo.build({
          user_id: user.id,
          nickname: user.username
        });
        return info.save().success(function() {
          return cb(null, user);
        }).error(function(err) {
          return cb(err);
        });
      }).error(function(err) {
        return cb(err);
      });
    },
    deleteUser: function(user, cb) {
      return User.find({
        where: user,
        include: [UserInfo]
      }).success(function(user) {
        return user.userInfo.destroy().success(function() {
          return user.destroy().success(function() {
            return cb(null);
          }).error(function(err) {
            return cb(err);
          });
        }).error(function(err) {
          return cb(err);
        });
      }).error(function(err) {
        return cb(err);
      });
    }
  };

}).call(this);
