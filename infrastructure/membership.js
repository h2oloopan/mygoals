// Generated by CoffeeScript 1.6.2
var auth, config, membership, userRepo;

auth = require('../helpers/auth');

config = require('../config');

userRepo = require('../repos/userRepo');

membership = module.exports = {
  repo: userRepo,
  initialize: function(repo) {
    return membership.repo = repo;
  },
  middleware: function(req, res, next) {
    var privilege, uid;

    privilege = req.signedCookies['P'];
    if (privilege != null) {
      req.privilege = parseInt(privilege);
    } else {
      req.privilege = config.system.privileges.guest;
    }
    uid = req.signedCookies['U'];
    if (uid != null) {
      return membership.repo.getUser({
        id: uid
      }, function(err, user) {
        if ((err == null) && (user != null)) {
          req.user = user;
        }
        return next();
      });
    } else {
      return next();
    }
  },
  authorize: function(privilege, handler) {
    var func;

    return func = function(req, res) {
      if (req.privilege < privilege) {
        return res.send(401);
      } else {
        return handler(req, res);
      }
    };
  },
  authenticate: function(eu, password, cb) {
    password = auth.encrypt(password);
    if (eu.indexOf('@') >= 0) {
      return membership.repo.getUserWithGroup({
        email: eu,
        password: password
      }, cb);
    } else {
      return membership.repo.getUserWithGroup({
        username: eu,
        password: password
      }, cb);
    }
  },
  login: function(user, res) {
    res.cookie('U', user.id.toString(), {
      signed: true
    });
    if (user.group != null) {
      return res.cookie('P', user.group.privilege.toString(), {
        signed: true
      });
    } else {
      return res.cookie('P', "0", {
        signed: true
      });
    }
  },
  logout: function(res) {
    res.clearCookie('U');
    return res.clearCookie('P');
  },
  signup: function(user, cb) {
    var password;

    if (user.password != null) {
      password = user.password;
      if (password.length < config.system.password.min || password.length > config.system.password.max) {
        return cb(new Error('Password must be between ' + config.system.password.min + ' and ' + config.system.password.max + ' characters'));
      }
      user.password = auth.encrypt(password);
    } else {
      return cb(new Error('Password is empty'));
    }
    return membership.repo.createUser(user, cb);
  }
};
