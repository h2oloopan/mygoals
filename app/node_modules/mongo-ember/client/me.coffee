define [], () ->
	#to use this, make sure Ember-Data and jQuery are already available
	keys = (obj) ->
        if !Object.keys
            func = (obj) ->
                hasOwnProperty = Object.prototype.hasOwnProperty
                if typeof obj != 'object' && (typeof obj != 'function' || obj == null)
                    throw new TypeError('Object.keys called on non-object');
                    return

                result = []
                result.push prop for prop of obj when hasOwnProperty.call obj, prop
                return result
            return func obj
        else
            return Object.keys(obj)

	me = 
		version: '{{version}}'
		models: '{{models}}'
		validators:
			required: (value) ->
				return if (value == null || value == undefined) then false else true
			match: (value, parameters) ->
				regExp = parameters[0]
				return null != value && if '' != value then regExp.test value else true

		attach: (App, names) ->
			thiz = @
			for name in names
				App[name] = DS.Model.extend @models[name].model
				App[name].reopen
					errors: {}
					validate: ->
						validations = me.models[name].validations
						for path in keys validations
							options = validations[path]
							for option in options
								type = option.type
								message = option.message
								parameters = option.parameters
								validator = thiz.validators[type]
								result = validator @get(path), parameters
								if !result then @set 'errors.' + path, message
						return


				
				App[name + 'Adapter'] = DS.RESTAdapter.extend @models[name].adapter
				App[name + 'Serializer'] = DS.RESTSerializer.extend @models[name].serializer
			return
		auth:
			signup: (user) ->
				url = '{{url_signup}}'
				data = JSON.stringify
					user: user.toJSON()
				return new Ember.RSVP.Promise (resolve, reject) ->
					$.ajax
						type: 'POST'
						contentType: 'application/json; charset=utf-8'
						url: url
						data: data
						dataType: 'json'
					.done (data) ->
						resolve data
					.fail (data) ->
						reject data.responseText
				#this returns a promise

			login: (user) ->
				url = '{{url_login}}'
				if typeof user.toJSON == 'function' then user = user.toJSON()
				return $.post url,
					user: user
				#this returns a promise
				
			check: ->
				url = '{{url_check}}'
				return new Ember.RSVP.Promise (resolve, reject) ->
					$.get(url).done (data) ->
						resolve data
					.fail (data) ->
						resolve null
	return me