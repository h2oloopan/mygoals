// Generated by CoffeeScript 1.7.1
var auth, crypto, deserialize, encrypt, h, me, mongoose, serialize, utils;

crypto = require('crypto');

mongoose = require('mongoose');

utils = require('mongoose/lib/utils');

me = require('./mongo-ember');

h = require('./helper');

encrypt = function(input) {
  var sha;
  sha = crypto.createHash('sha256');
  sha.update(input);
  return sha.digest('hex').toString();
};

serialize = function(user, cb) {
  return cb(null, user[me.settings.primaryKey]);
};

deserialize = function(id, cb) {
  return mongoose.models[me.settings.userModel].findById(id, cb);
};

auth = module.exports = {
  bind: function(app) {
    var cname, model, name, pf, uf, url;
    uf = me.settings.usernameField;
    pf = me.settings.passwordField;
    url = me.settings.authPath;
    name = me.settings.userModel;
    cname = utils.toCollectionName(name);
    model = mongoose.models[name];
    app.post(url, function(req, res) {
      var user;
      user = h.unwrap(req.body);
      if (user[pf] == null) {
        return res.send(500, 'password must be present');
      } else {
        user[pf] = encrypt(user[pf]);
        user = new model(user);
        return user.save(function(err, result) {
          if (err) {
            return res.send(500, err.message);
          } else {
            return res.send(201, {});
          }
        });
      }
    });
    return app.get(url, function(req, res) {
      if (req.user != null) {
        return res.send(200, req.user[me.settings.primaryKey]);
      } else {
        return res.send(401);
      }
    });
  },
  middleware: function(req, res, next) {
    return next();
  }
};
