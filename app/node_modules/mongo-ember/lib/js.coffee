fs = require 'fs'
path = require 'path'
clientJs = path.resolve __filename.substr(0, __filename.lastIndexOf('/')), '../client/me.js'

me = require './mongo-ember'

toSkip = [
	'__v'
]

toUnderscore = [
	'model'
]

typeMap =
	'String': 'string'
	'ObjectID': 'string'

models = '{'

createModel = (schema) ->
	js = ''
	keys = Object.keys schema
	count = 1
	for key in keys
		definition = schema[key]
		if toUnderscore.indexOf(key) >= 0 then js += '_'
			
		js += key + ': DS.attr("' + typeMap[definition.instance] + '")'

		if count < keys.length then js += ', '
		count++




	return js

createAdapter = (schema) ->
	return (if me.settings.namespace then 'namespace: "' + me.settings.namespace + '"' else '')

createSerializer = (schema) ->
	js = ''

	if me.settings.primaryKey != 'id' then js += 'primaryKey: "' + me.settings.primaryKey + '"'

	return js

createJs = (name, schema) ->
	console.log name
	console.log schema
	js = name + ':{ '

	js += '
			model: DS.Model.extend({' + createModel(schema) + '}),
			adapter: DS.RESTAdapter.extend({' + createAdapter(schema) + '}),
			serializer: DS.RESTSerializer.extend({' + createSerializer(schema) + '})
		  '

	js += '},'
	return js

postProcess = (data) ->
	version = '' + data.length

	if models.charAt(models.length - 1) == ',' then models = models.substr(0, models.length - 1)
	data = data.replace '\'{{version}}\'', version
	data = data.replace '\'{{models}}\'', models + '}'
	return data


js = module.exports = 
	addModel: (model) ->
		name = model.modelName
		paths = model.schema.paths
		keys = Object.keys paths
		for key in keys
			if toSkip.indexOf(key) >= 0
				delete paths[key]
			
		js = createJs name, paths
		models += js
		
		

	middleware: (req, res, next) ->
		#routing
		url = req.url
		switch url
			when me.settings.mePath
				fs.readFile clientJs,
					encoding: 'utf8'
				, (err, data) ->
					if err
						res.send 500, err.message
					else
						res.set 'Content-Type', 'text/javascript'
						res.send 200, postProcess data
			else
				next()