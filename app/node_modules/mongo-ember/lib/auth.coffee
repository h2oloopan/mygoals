crypto = require 'crypto'
mongoose = require 'mongoose'
utils = require 'mongoose/lib/utils'
me = require './mongo-ember'
h = require './helper'

encrypt = (input) ->
	sha = crypto.createHash 'sha256'
	sha.update input
	return sha.digest('hex').toString()

serialize = (user, cb) ->
	cb null, user[me.settings.primaryKey]

deserialize = (id, cb) ->
	mongoose.models[me.settings.userModel].findById id, cb

authenticate = (user, cb) ->
	uf = me.settings.usernameField
	pf = me.settings.passwordField
	toAuth = {}
	toAuth[uf] = user[uf]
	toAuth[pf] = encrypt user[pf]
	model = mongoose.models[me.settings.userModel]
	model.find toAuth, (err, result) ->
		if err
			cb err
		else if !result?
			cb new Error 'Cannot find a matching user'
		else
			cb null, result




login = (user, req, res) ->
	authenticate user, (err, user) ->
		if err
			res.send 500, err.message
		else
			serialize user, (err, toStore) ->
				if err
					res.send 500, err.message
				else
					req.session[me.settings.sessionKey] = toStore
					res.send 200, {}



auth = module.exports =
	bind: (app) ->
		uf = me.settings.usernameField
		pf = me.settings.passwordField
		url = me.settings.authPath
		name = me.settings.userModel
		cname = utils.toCollectionName name
		
		#override users api for authentication
		model = mongoose.models[name]
		
		#signup
		app.post url + '/signup', (req, res) ->
			user = h.unwrap req.body
			if !user[pf]?
				res.send 500, 'password must be present'
			else
				user[pf] = encrypt user[pf]
				user = new model user
				user.save (err, result) ->
					if err
						res.send 500, err.message
					else
						res.send 201, {}

		#check if logedin
		app.get url + '/check', (req, res) ->
			if req.user?
				id = req.user[me.settings.primaryKey]
				model.findById id, (err, result) ->
					if err
						res.send 500, err.message
					else
						res.send 200, result
			else
				res.send 401

		#login
		app.post url + '/login', (req, res) ->
			user = h.unwrap req.body
			if !user[pf]?
				res.send 500, 'password must be present'
			else
				login user, req, res




	middleware: (req, res, next) ->
		next()