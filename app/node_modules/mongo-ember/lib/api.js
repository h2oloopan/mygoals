// Generated by CoffeeScript 1.7.1
var api, crud, me, mongoose, unwrap, utils, wrap;

mongoose = require('mongoose');

utils = require('mongoose/lib/utils');

me = require('./mongo-ember');

wrap = function(input, wrapper) {
  var output;
  output = {};
  output[wrapper] = input;
  return output;
};

unwrap = function(input, ids) {
  var id, key, output, _i, _j, _len, _len1, _ref;
  key = Object.keys(input)[0];
  output = input[key];
  _ref = Object.keys(output);
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    key = _ref[_i];
    if (output[key] === null) {
      delete output[key];
    }
  }
  ids = ids || [];
  for (_j = 0, _len1 = ids.length; _j < _len1; _j++) {
    id = ids[_j];
    output[id] = mongoose.Types.ObjectId(output[id]);
  }
  return output;
};

crud = function(app, url, name) {
  var cname, model;
  model = mongoose.models[name];
  cname = utils.toCollectionName(name);
  app.post(url, function(req, res) {
    var obj;
    obj = unwrap(req.body);
    obj = new model(obj);
    return obj.save(function(err, result) {
      if (err) {
        return res.send(500, err.message);
      } else {
        return res.send(201, wrap(result, name));
      }
    });
  });
  app.get(url, function(req, res) {
    return model.find({}, function(err, result) {
      if (err) {
        return res.send(500, err.message);
      } else {
        return res.send(200, wrap(result, cname));
      }
    });
  });
  app.get(url + '/:id', function(req, res) {
    var id;
    id = req.params.id;
    return model.findById(id, function(err, result) {
      if (err) {
        return res.send(500, err.message);
      } else {
        return res.send(200, wrap(result, name));
      }
    });
  });
  app.put(url + '/:id', function(req, res) {
    var id, obj;
    id = req.params.id;
    obj = unwrap(req.body);
    return model.findByIdAndUpdate(id, obj, function(err, result) {
      if (err) {
        return res.send(500, err.message);
      } else {
        return res.send(200, wrap(result, name));
      }
    });
  });
  return app["delete"](url + '/:id', function(req, res) {
    var id;
    id = req.params.id;
    return model.findById(id, function(err, result) {
      if (err) {
        return res.send(500, err.message);
      } else if (result == null) {
        return res.send(500, 'No matching item to delete');
      } else {
        return result.remove(function(err, result) {
          if (err) {
            return res.send(500, err.message);
          } else {
            return res.send(204);
          }
        });
      }
    });
  });
};

api = module.exports = {
  bind: function(app) {
    var cname, model, models, name, root, url;
    root = '/' + (me.settings.namespace || '');
    models = mongoose.models;
    for (name in models) {
      model = models[name];
      cname = utils.toCollectionName(name);
      url = root + '/' + cname;
      crud(app, url, name);
    }
  }
};
