// Generated by CoffeeScript 1.6.2
define(['text!templates/admin/forums.html', 'models/section', 'models/sectionCollection'], function(template, Section, SectionCollection) {
  var ForumsView;

  return ForumsView = Backbone.View.extend({
    el: $('#content'),
    events: {
      'click .btn-addsection': 'btnClickAddSection',
      'click .btn-savesection': 'btnClickSaveSection',
      'click .btn-cancelsection': 'btnClickCancelSection',
      'click .btn-deletesection': 'btnClickDeleteSection',
      'click .btn-editsection': 'btnClickEditSection'
    },
    initialize: function() {
      return this.collection = new SectionCollection();
    },
    render: function() {
      this.collection.on('reset', this.updateTable, this);
      this.collection.on('remove', this.updateTable, this);
      return this.collection.fetch();
    },
    updateTable: function() {
      return this.$el.html(_.template(template, {
        sections: this.collection.toJSON()
      }));
    },
    btnClickAddSection: function(e) {
      var clone;

      this.cleanUp();
      clone = this.$('table.table-holder tr.row-editsection').clone().addClass('row-newsection');
      if (this.$('table.table tbody tr.row-newsection').length <= 0) {
        this.$('table.table tbody').append(clone);
      }
      return false;
    },
    btnClickEditSection: function(e) {
      var clone, row, section, target;

      target = $(e.currentTarget);
      section = this.collection.get(target.data('id'));
      row = target.parent().parent();
      this.cleanUp();
      clone = this.$('table.table-holder tr.row-editsection').clone();
      clone.find('input[name="order"]').val(section.get('order'));
      clone.find('input[name="name"]').val(section.get('name'));
      clone.find('a.btn-savesection').data('id', section.get('id'));
      row.addClass('temp-hidden').hide().after(clone);
      return false;
    },
    btnClickSaveSection: function(e) {
      var obj, result, row, section, target, view;

      target = $(e.currentTarget);
      row = target.parent().parent();
      obj = row.serializeObject({
        trim: true
      });
      if (target.data('id') != null) {
        section = this.collection.get(target.data('id'));
      } else {
        section = new Section();
      }
      section.set(obj);
      view = this;
      result = section.save(null, {
        success: function(model, res) {
          return view.collection.fetch({
            reset: true
          });
        },
        error: function(model, res) {
          alert(res.responseText);
          return false;
        }
      });
      if (!result) {
        alert(section.validationError);
      }
      return false;
    },
    btnClickDeleteSection: function(e) {
      var result, section, target;

      target = $(e.currentTarget);
      section = this.collection.get(target.data('id'));
      result = confirm('Are you sure to delete section ' + section.get('name') + '?');
      if (!result) {
        return false;
      }
      section.destroy({
        wait: true,
        error: function(model, res) {
          alert(res.responseText);
          return false;
        }
      });
      return false;
    },
    btnClickCancelSection: function(e) {
      var prev, row, target;

      target = $(e.currentTarget);
      row = target.parent().parent();
      prev = row.prev('tr.temp-hidden');
      row.remove();
      prev.show().removeClass('temp-hidden');
      return false;
    },
    cleanUp: function() {
      this.$('table.table tr.row-editsection').remove();
      this.$('table.table tr.temp-hidden').show().removeClass('temp-hidden');
      return false;
    }
  });
});
